{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPGYQo1JyVFMraHsv+PWLZ7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"FnYs6DQ039y5","executionInfo":{"status":"ok","timestamp":1747781265677,"user_tz":300,"elapsed":72530,"user":{"displayName":"Yeilis Orozco","userId":"06124586299515188896"}},"outputId":"e1cc91d7-c7da-4a73-f089-7d8847e73cf9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-beea5c55-ab2b-40ac-b412-bf4e8b52b812\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-beea5c55-ab2b-40ac-b412-bf4e8b52b812\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving log1.log to log1.log\n","Saving log2.log to log2.log\n","Saving log3.log to log3.log\n"]}],"source":["from google.colab import files\n","uploaded = files.upload()\n"]},{"cell_type":"code","source":["import re\n","import json\n","import requests\n","from collections import defaultdict\n","import os\n","\n","# Archivos de log\n","log_files = [\"log1.log\", \"log2.log\", \"log3.log\"]\n","\n","# Expresión regular\n","log_pattern = re.compile(r'(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+).*?\\[(?P<fecha>[^\\]]+)\\] \"(?P<metodo>\\w+) (?P<ruta>[^ ]+)')\n","\n","# Función para obtener país por IP\n","def obtener_pais(ip):\n","    try:\n","        r = requests.get(f\"http://ip-api.com/json/{ip}\", timeout=5)\n","        if r.status_code == 200:\n","            return r.json().get(\"country\", \"Desconocido\")\n","    except:\n","        pass\n","    return \"Desconocido\"\n","\n","# Agrupar ataques por país\n","datos = defaultdict(list)\n","\n","# Procesar logs\n","for file_name in log_files:\n","    if not os.path.exists(file_name):\n","        print(f\"NO ENCONTRADO: {file_name}\")\n","        continue\n","\n","    print(f\"Procesando: {file_name}\")\n","    with open(file_name, 'r', encoding='utf-8') as f:\n","        for linea in f:\n","            match = log_pattern.search(linea)\n","            if match:\n","                ip = match.group(\"ip\")\n","                fecha = match.group(\"fecha\")\n","                metodo = match.group(\"metodo\")\n","                ruta = match.group(\"ruta\")\n","                pais = obtener_pais(ip)\n","\n","                datos[pais].append({\n","                    \"fecha\": fecha,\n","                    \"método\": metodo,\n","                    \"ruta\": ruta\n","                })\n","\n","# Crear estructura JSON\n","resultado = []\n","for pais, ataques in datos.items():\n","    resultado.append({\n","        \"Country\": pais,\n","        \"Attacks\": ataques\n","    })\n","\n","# Mostrar directamente en pantalla\n","print(\"\\nRESULTADO JSON GENERADO:\\n\")\n","print(json.dumps(resultado, indent=2, ensure_ascii=False))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"loKKLTvo5UaC","executionInfo":{"status":"ok","timestamp":1747781507574,"user_tz":300,"elapsed":460,"user":{"displayName":"Yeilis Orozco","userId":"06124586299515188896"}},"outputId":"9ba63e47-6126-4e5d-90b4-ff54d140a8b1"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Procesando: log1.log\n","Procesando: log2.log\n","Procesando: log3.log\n","\n","RESULTADO JSON GENERADO:\n","\n","[\n","  {\n","    \"Country\": \"Desconocido\",\n","    \"Attacks\": [\n","      {\n","        \"fecha\": \"20/May/2025:10:15:32 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/index.html\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:11:03:12 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/docs/index.html\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:12:15:00 +0000\",\n","        \"método\": \"POST\",\n","        \"ruta\": \"/api/upload\"\n","      }\n","    ]\n","  },\n","  {\n","    \"Country\": \"United States\",\n","    \"Attacks\": [\n","      {\n","        \"fecha\": \"20/May/2025:10:16:12 +0000\",\n","        \"método\": \"POST\",\n","        \"ruta\": \"/login\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:10:17:44 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/admin\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:10:18:10 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/images/logo.png\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:11:01:22 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/api/data\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:11:02:33 +0000\",\n","        \"método\": \"POST\",\n","        \"ruta\": \"/api/login\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:11:04:07 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/static/js/main.js\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:11:05:55 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/contact\"\n","      },\n","      {\n","        \"fecha\": \"20/May/2025:12:10:00 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/robots.txt\"\n","      }\n","    ]\n","  },\n","  {\n","    \"Country\": \"Canada\",\n","    \"Attacks\": [\n","      {\n","        \"fecha\": \"20/May/2025:10:20:02 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/dashboard\"\n","      }\n","    ]\n","  },\n","  {\n","    \"Country\": \"India\",\n","    \"Attacks\": [\n","      {\n","        \"fecha\": \"20/May/2025:12:11:47 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/videos/watch.mp4\"\n","      }\n","    ]\n","  },\n","  {\n","    \"Country\": \"Romania\",\n","    \"Attacks\": [\n","      {\n","        \"fecha\": \"20/May/2025:12:13:20 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/secret\"\n","      }\n","    ]\n","  },\n","  {\n","    \"Country\": \"Australia\",\n","    \"Attacks\": [\n","      {\n","        \"fecha\": \"20/May/2025:12:16:43 +0000\",\n","        \"método\": \"GET\",\n","        \"ruta\": \"/reports/summary\"\n","      }\n","    ]\n","  }\n","]\n"]}]}]}
